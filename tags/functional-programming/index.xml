<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Terence Munro â€“ functional-programming</title><link>https://tm.gg/tags/functional-programming/</link><description>Recent content in functional-programming on Terence Munro</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://tm.gg/tags/functional-programming/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Category Theory</title><link>https://tm.gg/docs/functional-programming/category_theory/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tm.gg/docs/functional-programming/category_theory/</guid><description>
&lt;div class="pageinfo pageinfo-primary">
&lt;p>WIP: Placeholder page - Will focus on the parts of Category Theory that have been found to be most useful to Functional Programming.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://bartoszmilewski.com/2014/10/28/category-theory-for-programmers-the-preface/">Bartosz Milewski - Category Theory for Programmers&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=I8LbkfSSR58&amp;amp;list=PLbgaMIhjbmEnaH_LTkxLI7FMa2HsnawM_">YouTube: Bartosz Milewski - Category Theory&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/BartoszMilewski/Publications/blob/master/TheDaoOfFP/DaoFP.pdf">Bartosz Milewski - The Dao of Functional Programming&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://youtu.be/IBeceQHz2x8">YouTube: David Spivak - Category Theory&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/@TheCatsters">YouTube: TheCatsers&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://ncatlab.org/nlab/show/type+theory">nLab: Type Theory&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://ncatlab.org/homotopytypetheory/files/proposal2009.pdf">Steven Awodey - Homotopy and Type Theory&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/HoTT/book/wiki/Nightly-Builds">Book: Steven Awodey - Homotopy and Type Theory&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Curry%E2%80%93Howard_correspondence">Curry-Howard correspondence&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Cartesian_closed_category">Cartesian closed category&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://tm.gg/resources/ConceptualMathematics2ndEd.pdf" download>Book: Lawvere &amp;amp; Schanuel - Conceptual Mathematics, 2nd edition&lt;/a>&lt;/li>
&lt;/ul>
&lt;/div></description></item><item><title>Docs: Functional Programming</title><link>https://tm.gg/docs/functional-programming/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tm.gg/docs/functional-programming/</guid><description/></item><item><title>Docs: Haskell</title><link>https://tm.gg/docs/functional-programming/haskell/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tm.gg/docs/functional-programming/haskell/</guid><description>
&lt;div class="pageinfo pageinfo-primary">
&lt;p>WIP: Placeholder page&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://aosabook.org/en/posa/warp.html">AOSA: Warp&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://aosabook.org/en/yesod.html">AOSA: Yesod&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://aosabook.org/en/ghc.html">AOSA: GHC&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://haskellbook.com/">Book: Haskell Programming from First Principles&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://learnyouahaskell.com/">Book: Learn you a Haskell&lt;/a>&lt;/li>
&lt;/ul>
&lt;/div></description></item><item><title>Docs: Scala</title><link>https://tm.gg/docs/functional-programming/scala/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tm.gg/docs/functional-programming/scala/</guid><description>
&lt;p>This is a four day Scala course loosely based off &lt;a href="https://google.github.io/comprehensive-rust/">Google&amp;rsquo;s Comprehensive Rust&lt;/a>. The course will attempt to cover the full spectrum of Scala 3, from basic syntax to advanced topics like higher-kinded types, effect libraries and tagless final style programs.&lt;/p>
&lt;h2 id="goals">Goals&lt;/h2>
&lt;p>The goals of the course is to get you to a working understanding of advanced Scala. In this course I will assume you don&amp;rsquo;t know anything about Scala and I hope to:&lt;/p>
&lt;ul>
&lt;li>Give you a rough understanding of Scala&amp;rsquo;s advanced features&lt;/li>
&lt;li>Enable you to read and contribute to Scala programs that use these features&lt;/li>
&lt;li>Hopefully convince you that writing software like this is &lt;strong>productive&lt;/strong>, rewarding and all around fun ðŸ˜¹&lt;/li>
&lt;/ul>
&lt;h2 id="non-goals">Non-Goals&lt;/h2>
&lt;p>Unless you already have experience with other FP languages like Haskell, it is probably going to take more than a few days to completely learn Scala. So some non-goals of this course are:&lt;/p>
&lt;ul>
&lt;li>Learn about a lot of the &lt;a href="https://docs.scala-lang.org/scala3/book/domain-modeling-oop.html">OOP side of Scala&lt;/a>&lt;/li>
&lt;li>Learn how to use &lt;a href="https://akka.io/">Akka&lt;/a>&lt;/li>
&lt;li>Learn about &lt;a href="https://docs.scala-lang.org/scala3/book/types-variance.html">variance&lt;/a> (&lt;a href="https://en.wikipedia.org/wiki/Covariance_and_contravariance_(computer_science)">Wikipedia&lt;/a>)&lt;/li>
&lt;/ul>
&lt;h2 id="assumptions">Assumptions&lt;/h2>
&lt;p>This course assumes that you already know how to program. Scala is a statically typed language and there might be some comparative references to Haskell but I will also try to use TypeScript in-case that&amp;rsquo;s easier.&lt;/p>
&lt;p>You don&amp;rsquo;t have to know functional programming, but it will be the primary paradigm used in this course.&lt;/p></description></item></channel></rss>